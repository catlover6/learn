MAX_QSIZE = 10


class CircleQueue:
    def __init__(self):
        self.front = 0
        self.rear = 0
        self.items = [None] * MAX_QSIZE

    def isEmpty(self):
        return self.front == self.rear

    def isFull(self):
        return self.front == (self.rear + 1) % MAX_QSIZE

    def clear(self):
        self.front = self.rear

    def enqueue(self, item):
        if not self.isFull():
            self.rear = (self.rear + 1) % MAX_QSIZE
            self.items[self.rear] = item

    def dequeue(self):
        if not self.isEmpty():
            self.front = (self.front + 1) % MAX_QSIZE
            return self.items[self.front]

    def peek(self):
        if not self.isEmpty():
            return self.items[(self.front + 1) % MAX_QSIZE]

    def size(self):
        return (self.rear - self.front + MAX_QSIZE) % MAX_QSIZE

    def display(self):
        out = []
        if self.front < self.rear:
            out = self.items[self.front + 1:self.rear + 1]

        else:
            out = self.items[self.front + 1:MAX_QSIZE] + self.items[0:self.rear + 1]
        print("[f = %s,r =%d] ==> " % (self.front, self.rear), out)

class PriorityQueue:
    def __init__(self):
        self.items= []

    def isEmpty(self):
        return len(self.items) ==0

    def enqueue(self,item):
        self.items.append(item)

    def size(self):return len(self.items)

    def clear(self): self.items =[]

    def finMaxindex(self):
        if self.isEmpty(): return None
        else:
            highest =0
            for i in range(1,self.size()):
                if self.items[i]>self.items[highest]:
                    highest =i
        return highest

    def dequeue(self):
        highest = self.finMaxindex()
        if highest is not None:
            return self.items.pop(highest)

    def peek(self):
        highest = self.finMaxindex()
        if highest is not None:
            return self.items[highest]

q = PriorityQueue()
q.enqueue(34)
q.enqueue(19)
q.enqueue(50)
q.enqueue(20)
q.enqueue(21)

print(q.items)
while not q.isEmpty():
    print(q.dequeue())
